name: Release

on:
  push:
    tags:
      - "v*.*.*" # Run workflow on version tags, e.g. v1.0.0.

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      archive: ${{ steps.metadata.outputs.archive }}
      archive-checksum: ${{ steps.metadata.outputs.archive-checksum }}
      plugin-id: ${{ steps.metadata.outputs.plugin-id }}
      plugin-version: ${{ steps.metadata.outputs.plugin-version }}

    steps:
      - uses: actions/checkout@v2

      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: "22"

      - name: Setup Go environment
        uses: actions/setup-go@v3
        with:
          go-version: "1.21"

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache yarn cache
        uses: actions/cache@v3
        id: cache-yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-

      - name: Install dependencies
        run: yarn install --frozen-lockfile;
        if: |
          steps.cache-yarn-cache.outputs.cache-hit != 'true' ||
          steps.cache-node-modules.outputs.cache-hit != 'true'

      - name: Build and test frontend
        run: yarn build && yarn build:prod

      - name: Check for backend
        id: check-for-backend
        run: |
          if [ -f "Magefile.go" ]
          then
            echo "::set-output name=has-backend::true"
          fi

      - name: Test backend
        if: steps.check-for-backend.outputs.has-backend == 'true'
        uses: magefile/mage-action@v1
        with:
          version: latest
          args: coverage

      - name: Build backend
        if: steps.check-for-backend.outputs.has-backend == 'true'
        uses: magefile/mage-action@v1
        with:
          version: latest
          args: buildAll

      - name: Sign plugin
        run: yarn sign
        env:
          GRAFANA_API_KEY: ${{ secrets.GRAFANA_API_KEY }} # Requires a Grafana API key from Grafana.com.

      - name: Get plugin metadata
        id: metadata
        run: |
          sudo apt-get install jq

          export GRAFANA_PLUGIN_ID=$(cat dist/plugin.json | jq -r .id)
          export GRAFANA_PLUGIN_VERSION=$(cat dist/plugin.json | jq -r .info.version)
          export GRAFANA_PLUGIN_TYPE=$(cat dist/plugin.json | jq -r .type)
          export GRAFANA_PLUGIN_ARTIFACT=${GRAFANA_PLUGIN_ID}-${GRAFANA_PLUGIN_VERSION}.zip
          export GRAFANA_PLUGIN_ARTIFACT_CHECKSUM=${GRAFANA_PLUGIN_ARTIFACT}.md5

          echo "plugin-id=${GRAFANA_PLUGIN_ID}" >> $GITHUB_OUTPUT
          echo "plugin-version=${GRAFANA_PLUGIN_VERSION}" >> $GITHUB_OUTPUT
          echo "plugin-type=${GRAFANA_PLUGIN_TYPE}" >> $GITHUB_OUTPUT
          echo "archive=${GRAFANA_PLUGIN_ARTIFACT}" >> $GITHUB_OUTPUT
          echo "archive-checksum=${GRAFANA_PLUGIN_ARTIFACT_CHECKSUM}" >> $GITHUB_OUTPUT

          echo ::set-output name=github-tag::${GITHUB_REF#refs/*/}

      - name: Read changelog
        id: changelog
        run: |
          awk '/^## / {s++} s == 1 {print}' CHANGELOG.md > release_notes.md
          echo "::set-output name=path::release_notes.md"

      - name: Check package version
        run: if [[ "${{ steps.metadata.outputs.github-tag }}" != "v${{ steps.metadata.outputs.plugin-version }}"* ]]; then printf "\033[0;31mPlugin version doesn't match tag name\033[0m\n"; exit 1; fi

      - name: Package plugin
        id: package-plugin
        run: |
          mv dist ${{ steps.metadata.outputs.plugin-id }}
          zip ${{ steps.metadata.outputs.archive }} ${{ steps.metadata.outputs.plugin-id }} -r
          md5sum ${{ steps.metadata.outputs.archive }} > ${{ steps.metadata.outputs.archive-checksum }}
          echo "::set-output name=checksum::$(cat ./${{ steps.metadata.outputs.archive-checksum }} | cut -d' ' -f1)"

      # - name: Lint plugin
      #   run: |
      #     git clone https://github.com/grafana/plugin-validator
      #     pushd ./plugin-validator/pkg/cmd/plugincheck
      #     go install
      #     popd
      #     plugincheck ${{ steps.metadata.outputs.archive }}

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body_path: ${{ steps.changelog.outputs.path }}

      - name: Add plugin to release
        id: upload-plugin-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ steps.metadata.outputs.archive }}
          asset_name: ${{ steps.metadata.outputs.archive }}
          asset_content_type: application/zip

      - name: Add checksum to release
        id: upload-checksum-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ steps.metadata.outputs.archive-checksum }}
          asset_name: ${{ steps.metadata.outputs.archive-checksum }}
          asset_content_type: text/plain

      - name: Add TDinsight.json to release
        id: upload-tdinsight-json
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./src/dashboards/TDinsightV2.json
          asset_name: TDinsightV2.json
          asset_content_type: text/plain

      - name: Add TDinsightV3.json to release
        id: upload-tdinsightV3-json
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./src/dashboards/TDinsightV3.json
          asset_name: TDinsightV3.json
          asset_content_type: text/plain

      - name: Add TDinsight.sh to release
        id: upload-tdinsight-script
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./src/dashboards/TDinsight.sh
          asset_name: TDinsight.sh
          asset_content_type: text/plain
  upload-to-offical-site:
    runs-on:
      group: CI
      labels: [self-hosted, Linux, X64, testing]

    needs: release
    if: success()

    steps:
      - name: Download artifact
        run: |
          wget "https://github.com/taosdata/grafanaplugin/releases/download/v${{ needs.release.outputs.plugin-version }}/${{ needs.release.outputs.archive }}"
            
      - name: Upload Grafana Plugin (CN)
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.OFFICIAL_CN_HOST }}
          username: ${{ secrets.OFFICIAL_CN_USERNAME }}
          password: ${{ secrets.OFFICIAL_CN_PASSWORD }}
          source: ./${{ needs.release.outputs.archive }}
          target: ${{ secrets.GRAFANA_PLUGIN_PATH }}/tdengine-datasource.zip
      - name: Upload Grafana Plugin (EN)
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.OFFICIAL_EN_HOST }}
          username: ${{ secrets.OFFICIAL_EN_USERNAME }}
          password: ${{ secrets.OFFICIAL_EN_PASSWORD }}
          source: ./${{ needs.release.outputs.archive }}
          target: ${{ secrets.GRAFANA_PLUGIN_PATH }}/tdengine-datasource.zip      
